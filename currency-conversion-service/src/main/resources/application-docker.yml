server:
  port: ${SERVER_PORT:8082}

spring:
  application:
    name: currency-conversion-service
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres:5432/currency_conversion_db}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_MAX_SIZE:30}
      minimum-idle: ${DB_POOL_MIN_IDLE:10}
      idle-timeout: ${DB_POOL_IDLE_TIMEOUT:300000}
      connection-timeout: ${DB_POOL_CONNECTION_TIMEOUT:20000}
      max-lifetime: ${DB_POOL_MAX_LIFETIME:1200000}
      leak-detection-threshold: ${DB_POOL_LEAK_DETECTION:120000}
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
    show-sql: false
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.yml
    enabled: ${LIQUIBASE_ENABLED:true}
    drop-first: false
    contexts: docker
    default-schema: public
    liquibase-schema: public
    database-change-log-table: databasechangelog
    database-change-log-lock-table: databasechangeloglock
    tag: v1.0.0
    test-rollback-on-update: false
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://mongo:27017/fxcommanddb}
      database: fxcommanddb
      auto-index-creation: true
  cloud:
    discovery:
      enabled: false
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092}
    consumer:
      group-id: currency-conversion-service
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.json.trusted.packages: "com.hasandag.exchange.common.dto.cqrs.*,com.hasandag.exchange.conversion.kafka.event.*"
        spring.json.use.type.headers: false
        spring.json.value.default.type: "com.hasandag.exchange.common.dto.cqrs.ConversionEvent"
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        request.timeout.ms: 5000
        session.timeout.ms: 10000
        connections.max.idle.ms: 10000
        reconnect.backoff.ms: 1000
        retry.backoff.ms: 1000
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        request.timeout.ms: 5000
        delivery.timeout.ms: 10000
        connections.max.idle.ms: 10000
        reconnect.backoff.ms: 1000
        retry.backoff.ms: 1000
    admin:
      properties:
        request.timeout.ms: 5000
        connections.max.idle.ms: 10000
        reconnect.backoff.ms: 1000
        retry.backoff.ms: 1000
  batch:
    job:
      enabled: false
    jdbc:
      initialize-schema: always
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false
    default-property-inclusion: non_null
    time-zone: UTC
  task:
    execution:
      pool:
        core-size: ${SPRING_TASK_CORE_SIZE:5}
        max-size: ${SPRING_TASK_MAX_SIZE:20}
        queue-capacity: ${SPRING_TASK_QUEUE_CAPACITY:100}
        keep-alive: 60s
      thread-name-prefix: "async-task-"
      shutdown:
        await-termination: true
        await-termination-period: 30s
  threads:
    virtual:
      enabled: ${VIRTUAL_THREADS_ENABLED:true}

kafka:
  enabled: ${KAFKA_ENABLED:true}
  admin:
    enabled: ${KAFKA_ADMIN_ENABLED:true}
  topics:
    conversion-event:
      name: ${KAFKA_CONVERSION_TOPIC:conversion-event-topic}
      partitions: ${KAFKA_CONVERSION_PARTITIONS:3}
      replicas: ${KAFKA_CONVERSION_REPLICAS:1}

logging:
  level:
    com.hasandag: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN

springdoc:
  api-docs:
    path: /api/v1/api-docs
  swagger-ui:
    path: /api/v1/swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
    displayRequestDuration: true
  default-produces-media-type: application/json

conversion:
  exchange-rate-service:
    url: ${EXCHANGE_RATE_SERVICE_URL:http://exchange-rate-service:8083}
  batch:
    size: ${CONVERSION_BATCH_SIZE:1000}
    chunk-size: ${CONVERSION_BATCH_CHUNK_SIZE:100}
    skip-limit: ${CONVERSION_BATCH_SKIP_LIMIT:1000}
    retry-limit: ${CONVERSION_BATCH_RETRY_LIMIT:3}
    job:
      restart-enabled: ${CONVERSION_BATCH_RESTART_ENABLED:true}
      max-attempts: ${CONVERSION_BATCH_MAX_ATTEMPTS:3}
    task-executor:
      core-pool-size: ${CONVERSION_BATCH_CORE_POOL:2}
      max-pool-size: ${CONVERSION_BATCH_MAX_POOL:4}
      queue-capacity: ${CONVERSION_BATCH_QUEUE_CAPACITY:100}
      thread-name-prefix: "batch-"
  content-store:
    max-size: ${CONVERSION_CONTENT_STORE_MAX_SIZE:100}
    cleanup-interval: ${CONVERSION_CONTENT_STORE_CLEANUP_INTERVAL:300000}
    max-age: ${CONVERSION_CONTENT_STORE_MAX_AGE:3600000}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true